#!/bin/sh
if [ "$(id -u)" -ne 0 ]; then
	echo "This script must be run as root"
	exit 1
fi
alias query="curl -s -H 'User-Agent: NordApp Linux 3.10.0 Linux 5.4.0-58-generic'"
alias print="printf \"\033[32m%s\n\033[0m\""
alias print_error="printf \"\033[31m%s\n\033[0m\""
host="api.nordvpn.com"
conf_dir=/var/lib/wgnord
login() {
	[ -z "$1" ] && help
	pass="$2"
	if [ -z "$pass" ]; then
		printf "Enter password: "
		stty -echo
		read pass
		stty echo
		echo
	fi
	print "Logging in..."
	umask 027
	jq -njc "{username: \"$1\", password: \"$pass\"}" > $conf_dir/account.json
	get_token
	get_credentials
}
get_token() {
	print "Getting new access token..."
	query "https://$host/v1/users/tokens" -d "@$conf_dir/account.json" -H "Content-Type: application/json" > $conf_dir/token.json
	err="$(jq -er '.errors.message' $conf_dir/token.json)" && { print_error "Error getting token: $err"; exit 1; }
}
get_credentials() {
	print "Getting server credentials..."
	token_date=$(date -d "$(jq -r '.expires_at' $conf_dir/token.json)" --utc +%s)
	current_date=$(date --utc +%s)
	[ "$current_date" -ge $((token_date-60)) ] && get_token
	auth_token="$(printf "%s" "token:$(jq -j '.token' $conf_dir/token.json)" | base64 -w 0)"
	query "https://$host/v1/users/services/credentials" -H "Content-Type: application/json" -H "Authorization: Basic $auth_token" > $conf_dir/credentials.json
	err="$(jq -er '.errors.message' $conf_dir/credentials.json)" && { print_error "Error getting credentials: $err"; exit 1; }
}
connect() {
	out_file=/etc/wireguard/wgnord.conf
	OPTIND=2
	while getopts "fno:" o; do case "$o" in
		f) force=1 ;;
		n) dont_act=1 ;;
		o) out_file="$OPTARG" ;;
		*) exit 1 ;;
	esac done
	[ -z "$1" ] && help
	print "Finding best server..."
	if [ $force ] || [ ! -f $conf_dir/coords.json ] && [ ! $dont_act ]; then
		is_connected && disconnect
		insights="$(query "https://$host/v1/helpers/ips/insights")"
		longitude="$(echo "$insights" | jq -j '.longitude')"
		latitude="$(echo "$insights" | jq -j '.latitude')"
		jq -njc "{longitude: $longitude, latitude: $latitude}" > $conf_dir/coords.json
	else
		longitude="$(jq -er '.longitude' $conf_dir/coords.json)"
		latitude="$(jq -er '.latitude' $conf_dir/coords.json)"
	fi
	country_code="$(grep -i "$1" -m 1 $conf_dir/countries.txt | cut -d "	" -f 2)"
	recommendations="$(query "https://$host/v1/servers/recommendations?limit=20&filters%5Bservers.status%5D=online&filters%5Bservers_technologies%5D=35&filters%5Bservers_technologies%5D%5Bpivot%5D%5Bstatus%5D=online&fields%5Bservers.id%5D&fields%5Bservers.name%5D&fields%5Bservers.hostname%5D&fields%5Bservers.station%5D&fields%5Bservers.status%5D&fields%5Bservers.load%5D&fields%5Bservers.created_at%5D&fields%5Bservers.groups.id%5D&fields%5Bservers.groups.title%5D&fields%5Bservers.technologies.id%5D&fields%5Bservers.technologies.metadata%5D&fields%5Bservers.technologies.pivot.status%5D&fields%5Bservers.specifications.identifier%5D&fields%5Bservers.specifications.values.value%5D&fields%5Bservers.locations.country.name%5D&fields%5Bservers.locations.country.code%5D&fields%5Bservers.locations.country.city.name%5D&fields%5Bservers.locations.country.city.latitude%5D&fields%5Bservers.locations.country.city.longitude%5D&coordinates%5Blongitude%5D=$longitude&coordinates%5Blatitude%5D=$latitude&fields%5Bservers.ips%5D&filters%5Bcountry_id%5D=$country_code")"
	server_name="$(echo "$recommendations" | jq -j '.[0] | .name')"
	server_hostname="$(echo "$recommendations" | jq -j '.[0] | .hostname')"
	server_ip="$(echo "$recommendations" | jq -j '.[0] | .ips[0].ip.ip')"
	server_pubkey="$(echo "$recommendations" | jq -j '.[0] | .technologies[-1].metadata[0].value')"
	privkey="$(jq -j '.nordlynx_private_key' $conf_dir/credentials.json)"
	sed -e "s|PRIVKEY|$privkey|" -e "s|SERVER_PUBKEY|$server_pubkey|" -e "s|SERVER_IP|$server_ip|" $conf_dir/template.conf > "$out_file"
	if [ ! $dont_act ]; then
		print "Connecting to $server_hostname ($server_name)..."
		if is_connected; then
			wg-quick strip wgnord | wg setconf wgnord /dev/stdin
			wg set wgnord fwmark 0xca6c
		else
			wg-quick up wgnord
		fi && print "Connected successfully!"
	fi
}
disconnect() {
	print "Disconnecting..."
	wg-quick down wgnord
}
is_connected() {
	ip link show wgnord > /dev/null 2>&1
	return
}
help() { cat << EOF
Usage: wgnord [ l(ogin) | c(onnect) | d(isconnect) | g(et_credentials) ]

login:
    wgnord l "john.smith@example.com" "verysecurepassword"
    If the password was omitted it will be read from stdin
connect:
    wgnord c france
    -f            Refresh cached longitude/latitude
    -n            Don't connect
    -o out.conf   Write config to different file
disconnect:
    wgnord d
get_credentials:
    wgnord g
    This typically isn't needed. You can try running this if the connection fails

wgnord's files are in $conf_dir, edit template.conf to change Wireguard options
EOF
	exit
}

case $1 in
	l|login) login "$2" "$3" ;;
	c|connect) shift; connect "$@" ;;
	d|disconnect) disconnect ;;
	g|get_credentials) get_credentials ;;
	*) help ;;
esac
